#!/usr/bin/env python3

# stdlib
import sys
import argparse

# 3rd-party
import rospkg
from localbot_core.src.utilities_ros import data2pose
import rospy
from colorama import Fore, Style
from std_msgs.msg import Header, ColorRGBA
from geometry_msgs.msg import Point
from gazebo_msgs.msg import ModelState, ModelStates
from geometry_msgs.msg import Point, Pose, Vector3, Quaternion
from visualization_msgs.msg import *
from localbot_core.src.interactive_data_collection import InteractiveDataCollection
from localbot_core.src.automatic_data_collection import AutomaticDataCollection


def main():
    parser = argparse.ArgumentParser(description='Data Collector')
    parser.add_argument('-m', '--mode', type=str, default='interactive', help='interactive/automatic_random_path/automatic_path')
    parser.add_argument('-s', '--seq', type=str, required=True, help='sequence number')
    parser.add_argument('-dp', '--destination_pose', type=str, default='x,y,z,rx,ry,rz', help='destination pose')
    parser.add_argument('-nf', '--number_of_frames', type=int, required=True, help='number of frames')
    parser.add_argument('-dbf', '--distance_between_frames', type=float, default=0.03, help='Distance between frames in m')
    arglist = [x for x in sys.argv[1:] if not x.startswith('__')]
    args = vars(parser.parse_args(args=arglist))
    
    mode = args['mode']
    seq = args['seq']
    distance_between_frames = args['distance_between_frames']
    destination_pose = args['destination_pose']
    
    rospy.init_node(f"{mode}_data_collection")
    
    
    if mode == 'interactive':
        InteractiveDataCollection(model_name='localbot', seq = seq)
        rospy.spin() 
    elif mode == 'automatic_random':
        rate = rospy.Rate(0.4) 
        data_collector = AutomaticDataCollection(model_name='localbot', seq = seq)
        while not rospy.is_shutdown():    
            pose = data_collector.generateRandomPose()
            data_collector.setPose(pose)
            rospy.sleep(0.4)
            data_collector.saveFrame()
            rate.sleep()
            
            if data_collector.getFrameIdx() >= args['number_of_frames']:
                break
    elif mode == 'automatic_path':
        rate = rospy.Rate(0.4) 
        data_collector = AutomaticDataCollection(model_name='localbot', seq = seq, dbf = distance_between_frames)
        if destination_pose == 'x,y,z,rx,ry,rz': # use random poses
            while not rospy.is_shutdown():
                step_poses = data_collector.generatePath(distance_between_frames)
                for pose in step_poses:
                    data_collector.setPose(pose)
                    rospy.sleep(0.4)
                    data_collector.saveFrame()
                    rate.sleep() 
                print('final destination arrived')
                if data_collector.getFrameIdx() >= args['number_of_frames']:
                    break
        else:
            final_pose = data2pose(destination_pose)
            while not rospy.is_shutdown():
                step_poses = data_collector.generatePath(distance_between_frames,final_pose=final_pose)
                for pose in step_poses:
                    data_collector.setPose(pose)
                    rospy.sleep(0.4)
                    data_collector.saveFrame()
                    rate.sleep() 
                print('final destination arrived')
                break
            
    else:
        print('invalid mode')



if __name__ == "__main__":
    main()



