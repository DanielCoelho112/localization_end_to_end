#!/usr/bin/env python3

# stdlib
import sys
import argparse
import copy
import json

from regex import F

# 3rd-party
import rospy
from colorama import Fore, Style
from localbot_localization.src.dataset import LocalBotDataset
from localbot_localization.src.validate_dataset import ValidateDataset
import numpy as np
from localbot_core.src.utilities import *
import shutil


def main():
    parser = argparse.ArgumentParser(description='Validate dataset')
    parser.add_argument('-p0_sfm', '--pose0_sfm', type=str,
                        required=True, help='Name of the dataset')
    parser.add_argument('-p1_sfm', '--pose1_sfm', type=str,
                        required=True, help='Name of the dataset')
    parser.add_argument('-p2_sfm', '--pose2_sfm', type=str,
                        required=True, help='Name of the dataset')

    arglist = [x for x in sys.argv[1:] if not x.startswith('__')]
    args = vars(parser.parse_args(args=arglist))

    # get transformation from p0
    
    p0_sfm = f'/home/danc/datasets/localbot/meshroom/{args["pose0_sfm"]}'
    p1_sfm = f'/home/danc/datasets/localbot/meshroom/{args["pose1_sfm"]}'
    p2_sfm = f'/home/danc/datasets/localbot/meshroom/{args["pose2_sfm"]}'
    
    last_frame_0 = sum(f.endswith('.txt') for f in os.listdir(p0_sfm))-1
    matrix44_last_frame_0 = np.loadtxt(f'{p0_sfm}/frame-{last_frame_0:05d}.pose.txt', delimiter=',')
    
    first_frame_1 = args['pose1_sfm'].split('_')[-2]
    size_dataset_1 = sum(f.endswith('.txt') for f in os.listdir(p1_sfm))
    
    size_dataset_0 = sum(f.endswith('.txt') for f in os.listdir(p0_sfm))
    
    for idx in range(size_dataset_1):
        
        idx2 = idx + int(first_frame_1)
        print(idx2)
        matrix44 = np.loadtxt(f'{p1_sfm}/frame-{idx2:05d}.pose.txt', delimiter=',')
        
        matrix44_wrt_first_frame_0 = np.dot(matrix44_last_frame_0, matrix44)
        
        
        write_transformation(filename=f'{p1_sfm}/frame-{idx2:05d}.pose.txt', transformation=matrix44_wrt_first_frame_0)

    
    # copy p0 and p1 to p2 (p2 must be already created!)
    
    for idx in range(size_dataset_0):
        shutil.copy2(f'{p0_sfm}/frame-{idx:05d}.pose.txt', f'{p2_sfm}/frame-{idx:05d}.pose.txt')
    
    for idx in range(size_dataset_1):
        idx2 = idx + int(first_frame_1)
        shutil.copy2(f'{p1_sfm}/frame-{idx2:05d}.pose.txt', f'{p2_sfm}/frame-{idx2:05d}.pose.txt')
    
    
    
if __name__ == "__main__":
    main()
