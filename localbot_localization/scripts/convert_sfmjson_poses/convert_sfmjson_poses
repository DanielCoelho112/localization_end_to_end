#!/usr/bin/env python3

# stdlib
import sys
import argparse
import copy
import json

from regex import F

# 3rd-party
import rospy
from colorama import Fore, Style
from localbot_localization.src.dataset import LocalBotDataset
from localbot_localization.src.validate_dataset import ValidateDataset
import numpy as np
from localbot_core.src.utilities import *


def main():
    parser = argparse.ArgumentParser(description='Validate dataset')
    parser.add_argument('-d', '--dataset', type=str,
                        required=True, help='Name of the dataset')

    arglist = [x for x in sys.argv[1:] if not x.startswith('__')]
    args = vars(parser.parse_args(args=arglist))

    dataset = LocalBotDataset(path_seq=args['dataset'])
    json_path = f'{dataset.path_seq}_images/tutorial_out/reconstruction_global/pose/sfm_data_expanded.json'
    
    matrix44_frame0_world = np.loadtxt(f'{LocalBotDataset(dataset.getConfig()["raw"]).path_seq}/frame-00000.pose.txt', delimiter=',')
    
    # for each frame, we read the rotation, and translation. Transform into a 4x4 matrix and save it as txt.
    file = json.load(open(json_path))
    map_frame_poseid = {}
    
    for idx in range(len(dataset)):
        os.remove(f'{dataset.path_seq}/frame-{idx:05d}.pose.txt')

    matrix_frame0 = np.empty(shape=(4,4))
    
    for idx_view in range(len(file['views'])):
        frame = file['views'][idx_view]['value']['ptr_wrapper']['data']['filename']
        frame_id = int(frame[6:11])
        pose_id = file['views'][idx_view]['value']['ptr_wrapper']['data']['id_pose']
        
        map_frame_poseid[frame] = pose_id
        
        rotation = np.array(file['extrinsics'][pose_id]['value']['rotation'])
        position = np.array(file['extrinsics'][pose_id]['value']['center'])
        matrix44 = rotationAndpositionToMatrix44(rotation=rotation, position=position)
        
        if frame_id == 0:
            matrix_frame0 = matrix44
        
        # transform matrix44 to be w.r.t. frame0
        matrix44_wrt_0 = np.dot(np.linalg.inv(matrix_frame0), matrix44)
        
        # transform_matrix44_wrt0 to be w.r.t world
        matrix44_wrt_world = np.dot(matrix44_frame0_world, matrix44_wrt_0)
        write_transformation(filename=f'{dataset.path_seq}/frame-{frame_id:05d}.pose.txt', transformation=matrix44_wrt_world)
    
if __name__ == "__main__":
    main()
