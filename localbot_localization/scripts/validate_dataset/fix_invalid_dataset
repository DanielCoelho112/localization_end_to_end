#!/usr/bin/env python3

# stdlib
import sys
import argparse
import copy

# 3rd-party
import rospy
from colorama import Fore, Style
from std_msgs.msg import Header
from geometry_msgs.msg import Point, Pose, Vector3, Quaternion, TransformStamped, Transform
from visualization_msgs.msg import *
from localbot_localization.src.dataset import LocalBotDataset
from localbot_localization.src.validate_dataset import ValidateDataset
import numpy as np

def main():    
    parser = argparse.ArgumentParser(description='Validate dataset')
    parser.add_argument('-dataset', '--dataset', type=str, required=True, help='Name of the dataset')
   
    arglist = [x for x in sys.argv[1:] if not x.startswith('__')]
    args = vars(parser.parse_args(args=arglist))
    
    dataset = LocalBotDataset(path_seq=args['dataset'])
    
    validate = ValidateDataset()
    
    idxs = validate.invalidFrames(dataset)
    
    print('init remove frames')
    validate.removeFrames(dataset, idxs)
    
    print('init reorganize dataset')
    validate.reorganizeDataset(dataset)
    
    print('init remove nans')
    validate.removeNansPointCloud(dataset)
    
    print('init downsample pointcloud')
    validate.downsamplePointCloud(dataset, args['points'])
    
    print('init scale pointcloud')
    validate.scalePointCloud(dataset)
    
    if validate.validateDataset(dataset):
        print(f'{Fore.GREEN} Dataset was succesfully validated into {dataset.seq} {Fore.RESET}')
    else:
        print(f'{Fore.RED} There was a problem in the validation! {dataset.seq} {Fore.RESET}')
        
if __name__ == "__main__":
    main()



