#!/usr/bin/env python3

# stdlib
import sys
import argparse
import copy
from localbot_core.src.utilities import *

# 3rd-party
import rospy
from colorama import Fore, Style
from std_msgs.msg import Header
from geometry_msgs.msg import Point, Pose, Vector3, Quaternion, TransformStamped, Transform
from visualization_msgs.msg import *
from localbot_localization.src.dataset import LocalBotDataset
import numpy as np
import tf2_ros

from scipy.spatial.transform import Rotation as R
from tf.transformations import *
from matplotlib import cm



def main():
    
    parser = argparse.ArgumentParser(description='Visualizing dataset')
    parser.add_argument('-d1', '--dataset1', type=str, required=True, help='Name of the training set')
    parser.add_argument('-d2', '--dataset2', type=str, required=True, help='Name of the training set')
    parser.add_argument('-idx_max', '--idx_max', type=int,
                        default='0', help='max idx of the frame')
    parser.add_argument('-idx_min', '--idx_min', type=int,
                        default='0', help='min idx of the frame')
    
    arglist = [x for x in sys.argv[1:] if not x.startswith('__')]
    args = vars(parser.parse_args(args=arglist))
    
    dataset1 = LocalBotDataset(path_seq=args['dataset1'], inputs='rgb_image')
    dataset2 = LocalBotDataset(path_seq=args['dataset2'], inputs='rgb_image')
    
    rospy.init_node('visualize_dataset')
    rate = rospy.Rate(10) 
    
    marker_pub = rospy.Publisher("/marker_array", MarkerArray, queue_size=10)
    tf_broadcaster=tf2_ros.TransformBroadcaster()
    
         
    idx_max = int(args['idx_max'])
    idx_min = int(args['idx_min'])

    
    frames_used = list(range(idx_min,idx_max))

    if len(frames_used) == 0:
        print(f'{Fore.RED} no frames selected {Fore.RESET}')
        exit(0)

    
    
    colormap = cm.tab20(np.linspace(0, 1, len(frames_used)))
    
    print(f'frames used: {Fore.GREEN} {frames_used} {Fore.RESET}')

    while not rospy.is_shutdown():
        
        markers = MarkerArray()
        
        
        marker = Marker(header=Header(frame_id="map", stamp=rospy.Time.now()),
                        id=0, frame_locked=False,
                        type=Marker.MESH_RESOURCE, action=Marker.ADD, lifetime=rospy.Duration(0),
                        pose=Pose(position=Point(x=0, y=0, z=0), orientation=Quaternion(x=0, y=0, z=0, w=1)),
                        scale=Vector3(x=1.0, y=1.0, z=1.0))
        marker.mesh_resource = 'package://localbot_gazebo/models/room_024/room_024.dae'
        marker.mesh_use_embedded_materials = True
        markers.markers.append(marker)
        
        for idx,frame_idx in enumerate(frames_used):
            
            
            matrix44_pose1 = np.loadtxt(f'{dataset1.path_seq}/frame-{frame_idx:05d}.pose.txt', delimiter=',')
            matrix44_pose2 = np.loadtxt(f'{dataset2.path_seq}/frame-{frame_idx:05d}.pose.txt', delimiter=',')
            
            pose1 = matrix44_to_pose(matrix44_pose1)
            pose2 = matrix44_to_pose(matrix44_pose2)
            
            
            ######  gazebo ########

            # Rotate orientation because the arrow points to the X-axis! (it must point to Z-axis)
            pose_real_marker = copy.deepcopy(pose1)
            matrix_quaternion_marker = R.from_quat(
                pose_real_marker[3:]).as_matrix()
            rotate_y90 = R.from_euler('y', -90, degrees=True).as_matrix()
            matrix_quaternion_marker = np.dot(
                matrix_quaternion_marker, rotate_y90)
            quaternion_marker = R.from_matrix(
                matrix_quaternion_marker).as_quat()

            marker = Marker(header=Header(
                frame_id="map", stamp=rospy.Time.now()))
            marker.type = marker.ARROW
            marker.action = marker.ADD
            marker.scale.x = 0.3
            marker.scale.y = 0.05
            marker.scale.z = 0.05
            marker.color.a = 0.8
            marker.color.r = colormap[idx][0]
            marker.color.g = colormap[idx][1]
            marker.color.b = colormap[idx][2]
            marker.pose.orientation.x = quaternion_marker[0]
            marker.pose.orientation.y = quaternion_marker[1]
            marker.pose.orientation.z = quaternion_marker[2]
            marker.pose.orientation.w = quaternion_marker[3]
            marker.pose.position.x = pose1[0]
            marker.pose.position.y = pose1[1]
            marker.pose.position.z = pose1[2]
            marker.ns = 'gazebo'
            marker.id = idx

            markers.markers.append(marker)

            ######  Alternative  ########

            pose_predicted_marker = copy.deepcopy(pose2)
            matrix_quaternion_marker = R.from_quat(
                pose_predicted_marker[3:]).as_matrix()
            rotate_y90 = R.from_euler('y', -90, degrees=True).as_matrix()
            matrix_quaternion_marker = np.dot(
                matrix_quaternion_marker, rotate_y90)
            quaternion_marker = R.from_matrix(
                matrix_quaternion_marker).as_quat()

            marker = Marker(header=Header(
                frame_id="map", stamp=rospy.Time.now()))
            marker.type = marker.ARROW
            marker.action = marker.ADD
            marker.scale.x = 0.35
            marker.scale.y = 0.02
            marker.scale.z = 0.02
            marker.color.a = 0.4
            marker.color.r = colormap[idx][0]
            marker.color.g = colormap[idx][1]
            marker.color.b = colormap[idx][2]
            marker.pose.orientation.x = quaternion_marker[0]
            marker.pose.orientation.y = quaternion_marker[1]
            marker.pose.orientation.z = quaternion_marker[2]
            marker.pose.orientation.w = quaternion_marker[3]
            marker.pose.position.x = pose2[0]
            marker.pose.position.y = pose2[1]
            marker.pose.position.z = pose2[2]
            marker.ns = 'alternative'
            marker.id = idx

            markers.markers.append(marker)

        marker_pub.publish(markers)    
        rate.sleep()
        
        
        
    
    
if __name__ == "__main__":
    main()



